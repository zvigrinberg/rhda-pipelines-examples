node {
    def jdk
    def dockerArguments= '--user=root'
    def pipFreezeOutput
    def pipShowOutput
    def pythonImage = "${params.PYTHON_VERSION}-slim"
    stage('Checkout Git Repo') { // for display purposes
        // Get some code from a GitHub repository
        def test = '/home/zgrinber/.jenkins/workspace/run RHDA plugin with python'.replaceAll(" ", "\\\\ ")
        echo "test=${test}"
        git  branch: 'main', url:'https://github.com/zvigrinberg/rhda-pipelines-examples.git'
        sh 'mkdir -p /tmp/jenkins-test-pip ; cp requirements.txt /tmp/jenkins-test-pip/requirements.txt'
        // Get the Maven tool.
        // ** NOTE: This 'M3' Maven tool must be configured
        // **       in the global configuration.
        jdk = tool 'jdk11'


    }
    stage('Install Python Package') {
        docker.withTool('docker-tool') {
            docker.withServer('tcp://localhost:2376','docker-server-certs'){

                docker.image(pythonImage).inside(dockerArguments) {
                    sh 'pip install -r requirements.txt'
                    pipFreezeOutput = sh(script: "pip freeze --all" ,returnStdout: true ).trim()
                    writeFile([file: 'pip-freeze.txt', text: pipFreezeOutput])
                    pipFreezeOutput = sh(script: "pip freeze --all | awk -F \"==\" '{print \$1}' | tr \"\n\" \" \"" ,returnStdout: true ).trim()
                    pipShowOutput = sh(script:"pip show ${pipFreezeOutput}" ,returnStdout: true )
                    writeFile([file: 'pip-show.txt', text: pipShowOutput])


                }
            }
        }
    }
    stage('RHDA Run Analysis') {
        echo "pipFreezeOutput= ${pipFreezeOutput}"
        echo "pipShowOutput= ${pipShowOutput}"
        def rhdaWorkspace = env.WORKSPACE
        escapedWorkspace = rhdaWorkspace.toString().replaceAll(" ", "\\\\ ")
        echo "escapedWorkspace= ${escapedWorkspace}"
        // sh 'cp pythonMock.sh /tmp/pip ; chmod +x /tmp/pip'
        def doubleEscapedWorkspace = escapedWorkspace.replaceAll("\\\\","\\\\\\\\").replaceAll("\\/","\\\\/")
        echo "doubleEscapedWorkspace= ${doubleEscapedWorkspace}"
// sh(script: "echo ${escapedWorkspace} | sed 's/\\/\\\\/g' | sed 's/\//\\\//g'" ,returnStdout: true ).trim()
        sh "sed 's/\$PLACE_HOLDER/${doubleEscapedWorkspace}/g' pythonMock.sh > /tmp/pip ; chmod +x /tmp/pip"
        echo "escapedWorkspace= ${escapedWorkspace}"
        withEnv(["WORKSPACE_PATH=${escapedWorkspace}","EXHORT_PIP3_PATH=/tmp/pip","EXHORT_PYTHON3_PATH=/tmp/pip"]) {

            rhdaAnalysis consentTelemetry: true, file: 'requirements.txt'
        }

    }

    stage('Clean Workspace') {
        cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
    }

}

