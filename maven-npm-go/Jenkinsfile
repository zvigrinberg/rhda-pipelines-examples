pipeline {
    agent any
    parameters {
        choice(name: 'MANIFEST_TYPE', choices: ['maven', 'npm', 'golang'], description: 'manifest type to run analysis on')
        string(name: 'MANIFEST_GIT_BRANCH', defaultValue: "main", description: 'git repository of manifest branch')
        string(name: 'MANIFEST_GIT_REPO', defaultValue: "https://github.com/zvigrinberg/rhda-pipelines-examples.git", description: 'git repository of manifest')
        string(name: 'MANIFEST_DIR', defaultValue: "", description: 'git repository of manifest')
    }
    environment {
        EXHORT_DEBUG =  "true"
    }
    stages {
        stage('checkout manifest Repository') {
            steps {
                git branch: MANIFEST_GIT_BRANCH, url: MANIFEST_GIT_REPO
            }
        }

        stage('RHDA Analysis - Maven') {
            when {
                expression { params.MANIFEST_TYPE == 'maven' }
            }
            steps {
                script {
                    def maven = tool 'apache-maven'
                    env.EXHORT_MVN_PATH = "$maven/bin/mvn"
                    invokeRhdaAnalysis("pom.xml",MANIFEST_DIR)
                }
            }
        }
        stage('RHDA Analysis - Npm') {
            when {
                expression { params.MANIFEST_TYPE == 'npm' }
            }
            steps {
                script {
                    def node = tool 'node-lts'
                    env.EXHORT_MPM_PATH = "$node/bin/npm"
                    invokeRhdaAnalysis("package.json",MANIFEST_DIR)
                }
            }
        }

        stage('RHDA Analysis - go') {
            when {
                expression { params.MANIFEST_TYPE == 'go' }
            }
            steps {
                script {
                    def go = tool 'golang'
                    env.EXHORT_GO_PATH = "$go/bin/npm"
                    invokeRhdaAnalysis("go.mod",MANIFEST_DIR)
                }
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs cleanWhenAborted: false, cleanWhenFailure: false, cleanWhenNotBuilt: false, cleanWhenUnstable: false
            }
        }


    }
}

private String getPathOfBinary(String packageManifest) {
    return sh(returnStdout: true, script: "which ${packageManifest}")
}

private void invokeRhdaAnalysis(String manifestName,String pathToManifestDir) {
    final VULNERABLE_RETURN_CODE = "2"
    final GENERAL_ERROR_RETURN_CODE = "1"
    def theFile
    if(pathToManifestDir.trim().equals("")) {
        theFile = "${WORKSPACE}/${manifestName}"
    }
    else {
        theFile = "${WORKSPACE}/${pathToManifestDir}/${manifestName}"
        echo "theFile=${theFile}"
    }
    try {
        withEnv(['EXHORT_DEBUG=true']) {
            def result = rhdaAnalysis consentTelemetry: true, file: theFile
        }
        if (result.trim().equals(VULNERABLE_RETURN_CODE)) {
            unstable(message: "There are some vulnerabilities in Manifest, please upgrade according to the report")
        }
        else {
            if(result.trim().equals(GENERAL_ERROR_RETURN_CODE)) {
                error(message: "Failed To Invoke RHDA Analysis")
            }
        }

    }
    catch (Exception e) {
        error(message: "Intercepted Error --> ${e}")
    }
}